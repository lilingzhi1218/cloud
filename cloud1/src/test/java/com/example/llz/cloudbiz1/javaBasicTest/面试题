1.String和StringBuffer主要区别是性能:String是不可变对象,每次对String类型进行操作都等同于产生了一个新的String对象,然后指向新的String对象.
  所以尽量不要对String进行大量的拼接操作,否则会产生很多临时对象,导致GC开始工作,影响系统性能.
2.StringBuffer是对象本身操作,而不是产生新的对象,因此在有大量拼接的情况下,我们建议使用StringBuffer(线程安全).
3.StringBuffer和StringBuilder的实现原理一样,其父类都是AbstractStringBuilder.StringBuffer是线程安全的,
  StringBuilder是JDK 1.5新增的,其功能和StringBuffer类似,但是非线程安全.因此,在没有多线程问题的前提下,使用StringBuilder会取得更好的性能.
4.如何将byte转为String
  可以使用String接收 byte[] 参数的构造器来进行转换,注意要使用的正确的编码,否则会使用平台默认编码.这个编码可能跟原来的编码相同.也可能不同.
5.可以将int强转为byte类型么?会产生什么问题?
  可以做强制转换,但是Java中int是32位的而byte是8 位的.如果强制转化int类型的高24位将会被丢弃,byte 类型的范围是从-128到128.
6.a=a+b与a+=b有什么区别吗?
  +=操作符会进行隐式自动类型转换,此处a+=b隐式的将加操作的结果类型强制转换为持有结果的类型,而a=a+b则不会自动进行类型转换.如：
  byte a = 127;
  byte b = 127;
  b = a + b; // 报编译错误:cannot convert from int to byte
  b += a; 
  以下代码是否有错？
  short s1= 1;
  s1 = s1 + 1;
  有错误.short类型在进行运算时会自动提升为int类型,也就是说s1+1的运算结果是int类型,而s1是short类型,此时编译器会报错.
  以下代码是否有错？
  short s1= 1;
  s1 += 1;
  +=操作符会对右边的表达式结果强转匹配左边的数据类型,所以没错
7.了解泛型么?简述泛型的上界和下界?
  有时候希望传入的类型有一个指定的范围，从而可以进行一些特定的操作,这时候就需要通配符了?在Java中常见的通配符主要有以下几种:
  <?>: 无限制通配符
  <? extends E>: extends 关键字声明了类型的上界,表示参数化的类型可能是所指定的类型,或者是此类型的子类
  <? super E>: super关键字声明了类型的下界,表示参数化的类型可能是指定的类型,或者是此类型的父类
  它们的目的都是为了使方法接口更为灵活,可以接受更为广泛的类型.
  
  < ? extends E>: 用于灵活读取，使得方法可以读取 E 或 E 的任意子类型的容器对象。
  < ? super E>: 用于灵活写入或比较,使得对象可以写入父类型的容器,使得父类型的比较方法可以应用于子类对象。
  用简单的一句话来概括就是为了获得最大限度的灵活性,要在表示生产者或者消费者的输入参数上使用通配符,
  使用的规则就是:生产者有上限(读操作使用extends),消费者有下限(写操作使用super)
8.垃圾回收
  简单的解释一下垃圾回收?
  JVM中垃圾回收机制最基本的做法是分代回收.内存中的区域被划分成不同的世代,对象根据其存活的时间被保存在对应世代的区域中.
  一般的实现是划分成3个世代:年轻,年老和永久代.所有新生成的对象优先放在年轻代的(大对象可能被直接分配在老年代,作为一种分配担保机制),
  年轻代按照统计规律被分为三个区:一个Eden区，两个 Survivor区.在年轻代中经历了N次垃圾回收后仍然存活的对象,就会被放到年老代中.
  因此可以认为年老代中存放的都是一些生命周期较长的对象.
  
  方法区也被称为永久代,用于存储每一个java类的结构信息:比如运行时常量池,字段和方法数据,构造函数和普通方法的字节码内容以及类,实例,
  接口初始化时需要使用到的特殊方法等数据,根据虚拟机实现不同,GC可以选择对方法区进行回收也可以不回收.
  对于不同的世代可以使用不同的垃圾回收算法。比如对由于年轻代存放的对象多是朝生夕死,因此可以采用标记-复制,而对于老年代则可以采用标记-整理/清除.

9.Minor GC
  发生在新生代的GC为Minor GC.在Minor GC时会将新生代中还存活着的对象复制进一个Survivor中,然后对Eden和另一个Survivor进行清理.所以,平常可用的新生代大小为Eden的大小+一个Survivor的大小.
  
10.Major GC
  在老年代中的GC则为Major GC.
  
11.Full GC
  通常是和Major GC等价的,针对整个新生代,老年代,元空间metaspace(java8以上版本取代perm gen)的全局范围的GC.
  
  关于GC的类型,其实依赖于不同的垃圾回收器.可以具体查看相关垃圾回收器的实现.

12.新生代进入老年代
   分配担保机制:当Minor GC时,新生代存活的对象大于Survivor的大小时,这时一个Survivor装不下它们,那么它们就会进入老年代.
   如果设置了-XX：PretenureSizeThreshold5M 那么大于5M的对象就会直接就进入老年代.
   在新生代的每一次Minor GC 都会给在新生代中的对象+1岁,默认到15岁时就会从新生代进入老年代,可以通过-XX：MaxTenuringThreshold来设置这个临界点
   常见的垃圾回收算法有哪些?简述其原理.
   垃圾回收从理论上非常容易理解,具体的方法有以下几种:
   标记-清除
   标记-复制
   标记-整理
   分代回收
13.如何判断一个对象是否应该被回收?
   这就是所谓的对象存活性判断,常用的方法有两种:
   （1）引用计数法
   （2）对象可达性分析
   由于引用计数法存在互相引用导致无法进行GC的问题,所以目前JVM虚拟机多使用对象可达性分析算法.
14.哪些对象可以做GC Root?
   JVM的标记算法我们可以了解为一个可达性算法，所以所有的可达性算法都会有起点，那么这个起点就是GC Root。
   主要由以下四种:
   JVM方法栈中引用的对象
   本地方法栈中引用的对象
   方法区常量引用的对象
   方法区类属性引用的对象
15.调用System.gc()会发生什么?
   通知GC开始工作,但是GC真正开始的时间不确定.
16.了解java当中的四种引用类型?他们之间的区别是什么?
   在java中主要有以下四种引用类型:强引用,软引用,弱引用,虚引用.不同的引用类型主要体现在GC上:
   （1）强引用:如果一个对象具有强引用,它就不会被垃圾回收器回收.即使当前内存空间不足,JVM也不会回收它.而是抛出 OutOfMemoryError 错误.
       使程序异常终止.如果想中断强引用和某个对象之间的关联.可以显式地将引用赋值为null,这样一来的话.JVM在合适的时间就会回收该对象.
   （2）软引用:在使用软引用时,如果内存的空间足够,软引用就能继续被使用而不会被垃圾回收器回收.只有在内存不足时,软引用才会被垃圾回收器回收.
   （3）弱引用:具有弱引用的对象拥有的生命周期更短暂.因为当 JVM 进行垃圾回收,一旦发现弱引用对象,无论当前内存空间是否充足,都会将弱引用回收.
       不过由于垃圾回收器是一个优先级较低的线程,所以并不一定能迅速发现弱引用对象.
   （4）虚引用:如果一个对象仅持有虚引用,那么它相当于没有引用,在任何时候都可能被垃圾回收器回收.
   
17.spring的bean作用域都有哪些？默认是哪个？
   作用域	字符	        描述
   单例	    singleton	整个应用中只创建一个实例
   原型	    prototype	每次注入时都新建一个实例
   会话	    session	    为每个会话创建一个实例
   请求	    request	    为每个请求创建一个实例
   默认的是：单例 singleton
18.创建单例的方式是否线程安全
   （1）懒汉式（不安全写法）
   public class Singleton{ 
       private Singleton(){}
       private static Singleton singleton = null；  //不建立对象
       public static Singleton getInstance(){
                if(singleton == null) {        //先判断是否为空
                    singleton = new Singleton ();  //懒汉式做法 
                }
                return singleton;
        }
   }
   （2）饿汉式
      public class Singleton{ 
          public Singleton(){}
          private static Singleton singleton = new Singleton()；  //建立对象
          public static Singleton getInstance(){
            return singleton;//直接返回单例对象 
          }
      }
    这两种创建方式中，懒汉式在多线程环境下就是线程不安全的，假设有线程1和线程2两个线程，线程1在判断if(singleton == null)的时候，突然失去cpu的执行权，
    而线程2获得了cpu的执行权，执行了getInstance()方法，创建了个对象，但是这个事情线程1并不知道，线程1重新获得cpu的执行权时，判断f(singleton == null)结果是null，
    所以又去创建了对象，那么这样就会出现破坏单例的情况，有多余的对象，所以线程是不安全的，解决方案之一就是加锁，代码如下
   （3）懒汉式（安全写法）
    public class Singleton{ 
        private Singleton(){}
        private static Singleton singleton = null；  //不建立对象
        public static synchronized Singleton getInstance(){
                 if(singleton == null) {        //先判断是否为空
                     singleton = new Singleton ();  //懒汉式做法 
                 }
                 return singleton;
         }
    }
    这种写法虽然保证了线程安全，但是后续线程每次在获取对象的时候不会进入if中，也就不会有线程安全问题，可这时候还是每次都进入同步块，影响性能，这是首应该采用双重监测机制
    （3）懒汉式（优化安全写法）
    public class Singleton{ 
            private Singleton(){}
            private static Singleton singleton = null；  //不建立对象
            public static Singleton getInstance(){
                 if(singleton == null) {        //先判断是否为空
                     synchronized(Singleton.class){ //为空才进入同步代码块
                        if(singleton == null){  //双重监测机制
                            singleton = new Singleton ();  //懒汉式做法
                        }
                     }
                 }
                 return singleton;
             }
    还有一种可能就是虚拟机在创建一个对象的时候有三个步骤：（1）为对象分配内存空间（2）初始化对象（3）将变量指向刚刚分配的内存地址，但是这个执行顺序不是一成不变的，
    若p1线程刚执行完（1）（3）步，线程p2就来判断singleton是否为null，结果为否，然后取到一个未初始化的对象。这时候有线程安全问题就来了。
    用volatile来保证指令重排的问题，即把singleton这个变量声明为volatile。
    （4）懒汉式（优化安全并避免指令重排的写法）
    public class Singleton{ 
        private Singleton(){}
        private static volatile Singleton singleton = null；  //不建立对象
        public static synchronized Singleton getInstance(){
             if(singleton == null) {        //先判断是否为空
                 singleton = new Singleton ();  //懒汉式做法 
             }
             return singleton;
         }
    }
    
    
19.spring创建单例的方式？
   Spring 对 Bean 实例的创建是采用单例注册表的方式进行实现的，而这个注册表的缓存是 ConcurrentHashMap 对象。
    public class DefaultSingletonBeanRegistry extends SimpleAliasRegistry implements SingletonBeanRegistry {
        // 通过 Map 实现单例注册表
        private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(64);
        public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {
            Assert.notNull(beanName, "'beanName' must not be null");
            synchronized (this.singletonObjects) {
                // 检查缓存中是否存在实例  
                Object singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    // ...忽略代码
                    try {
                        singletonObject = singletonFactory.getObject();
                    }
                    catch (BeanCreationException ex) {
                        // ...忽略代码
                    }
                    finally {
                        // ...忽略代码
                    }
                    // 如果实例对象在不存在，我们注册到单例注册表中。
                    addSingleton(beanName, singletonObject);
                }
                return (singletonObject != NULL_OBJECT ? singletonObject : null);
            }
        }
        protected void addSingleton(String beanName, Object singletonObject) {
            synchronized (this.singletonObjects) {
                this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT));
    
            }
        }
    }
*20.怎么判断使用已经创建好的单例对象是否线程安全？
   （1）看这个单例里有没有全局变量（全局变量就是成员变量，成员变量又分实例变量和静态变量）
   （2）如果有全局变量，看它是不是只可以读取而不能写入（有没有发布set方法）  
   如果满足上面两个条件，那么这个单例就是不安全的。 
21.spring的单例模式与线程安全
   
   （1）spring框架里的bean获取实例的时候都是默认单例模式，所以在多线程开发里就有可能会出现线程不安全的问题。当多个用户同时请求一个服务器时，
     容器（tomcat）会给每一个请求分配一个线程，这时多个线程会并发执行该请求所对应的业务逻辑（controller里的方法），此时就要注意啦，
     如果controller（是单例对象）里有全局变量并且又是可以修改的，那么就需要考虑线程安全的问题。解决方案有很多，
     比如设置@scope("prototype")为多例模式，为每个线程创建一个controller，还可以使用ThreadLocal。
   
   （2）其实spring的源码里比如RequestContextHolder、TransactionSynchronizationManager、LoxaleContextHolder等这些对象创建方式也是单例，
     底层就是用ThreadLocal处理的。ThreadLocal基本实现思路是：它会为每个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突，
     因为每个线程都拥有自己的变量副本，从而也就没必要对该变量进行同步啦。
22.spring单例模式和多例模式的用途
    之所以用单例，是因为没必要每个请求都新建一个对象，这样子既浪费CPU又浪费内存；
    之所以用多例，是为了防止并发问题；即一个请求改变了对象的状态，此时对象又处理另一个请求，而之前请求对对象状态的改变导致了对象对另一个请求做了错误的处理；
    
    可以全部用单例，也可以全部用非单例；
    单例：节约对象创建的时间和垃圾回收时间，但是可能面临并发的危险；
    所以大部分情况都是使用单例，只要注意在使用单例的时候可能造成的并发就可以了；
    对象属性最好是不能更改的，或者控制其更改；
    从性能上考虑的话，使用单例的配置很不错，毕竟spring默认就是使用单例，
    当然你如果已经出现了并发的问题了，就需要使用prototype了，然后再考虑怎么解决单例产生的问题；

23.自动配置
   SpringBoot的核心就是自动配置，自动配置又是基于条件判断来配置Bean。
24.SpringBoot运行原理
   (1.三个重要的注解
    我们可以发现，在使用main()启动SpringBoot的时候，只有一个注解@SpringBootApplication
    我们可以点击进去@SpringBootApplication注解中看看，可以发现有三个注解是比较重要的：
    @SpringBootConfiguration：我们点进去以后可以发现底层是Configuration注解，说白了就是支持JavaConfig的方式来进行配置(使用Configuration配置类等同于XML文件)。
    @EnableAutoConfiguration：开启自动配置功能(后文详解)
    @ComponentScan：这个注解，学过Spring的同学应该对它不会陌生，就是扫描注解，默认是扫描当前类下的package。将@Controller/@Service/@Component/@Repository等注解加载到IOC容器中。    
   (2.重点EnableAutoConfiguration
    我们知道SpringBoot可以帮我们减少很多的配置，也肯定听过“约定大于配置”这么一句话，那SpringBoot是怎么做的呢？其实靠的就是@EnableAutoConfiguration注解。
    简单来说，这个注解可以帮助我们自动载入应用程序所需要的所有默认配置。
    我们点进去看一下，发现有两个比较重要的注解：
    @AutoConfigurationPackage：自动配置包
    @Import：给IOC容器导入组件
        (2.1.AutoConfigurationPackage
             @AutoConfigurationPackage自动配置包，我们也看看@AutoConfigurationPackage里边有什么
                 @Target(ElementType.TYPE)
                 @Retention(RetentionPolicy.RUNTIME)
                 @Documented
                 @Inherited
                 @Import(AutoConfigurationPackages.Registrar.class)
                 public @interface AutoConfigurationPackage {
                 
                 }
             我们可以发现，依靠的还是@Import注解，再点进去查看，我们发现重要的就是以下的代码：
                 @Override
                 public void registerBeanDefinitions(AnnotationMetadata metadata,
                         BeanDefinitionRegistry registry) {
                     register(registry, new PackageImport(metadata).getPackageName());
                 }
             在默认的情况下就是将：主配置类(@SpringBootApplication)的所在包及其子包里边的组件扫描到Spring容器中。
             看完这句话，会不会觉得，这不就是ComponentScan的功能吗？这俩不就重复了吗？
             比如说，你用了Spring Data JPA，可能会在实体类上写@Entity注解。这个@Entity注解由@AutoConfigurationPackage扫描并加载，
             而我们平时开发用的@Controller/@Service/@Component/@Repository这些注解是由ComponentScan来扫描并加载的。
    (3总结
    @SpringBootApplication等同于下面三个注解：
    
    @SpringBootConfiguration
    @EnableAutoConfiguration
    @ComponentScan
    其中@EnableAutoConfiguration是关键(启用自动配置)，内部实际上就去加载META-INF/spring.factories文件的信息，
    然后筛选出以EnableAutoConfiguration为key的数据，加载到IOC容器中，实现自动配置功能！
    
    spring 的优点？
    1.降低了组件之间的耦合性 ，实现了软件各层之间的解耦 
    2.可以使用容易提供的众多服务，如事务管理，消息服务等 
    3.容器提供单例模式支持 
    4.容器提供了AOP技术，利用它很容易实现如权限拦截，运行期监控等功能 
    5.容器提供了众多的辅助类，能加快应用的开发 
    6.spring对于主流的应用框架提供了集成支持，如hibernate，JPA，Struts等 
    7.spring属于低侵入式设计，代码的污染极低 
    8.独立于各种应用服务器 
    9.spring的DI机制降低了业务对象替换的复杂性 
    10.Spring的高度开放性，并不强制应用完全依赖于Spring，开发者可以自由选择spring的部分或全部 
    
    什么是DI机制？ 
    依赖注入（Dependecy Injection）和控制反转（Inversion of Control）是同一个概念，具体的讲：当某个角色需要另外一个角色协助的时候，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。
    但在spring中创建被调用者的工作不再由调用者来完成，因此称为控制反转。创建被调用者的工作由spring来完成，然后注入调用者 因此也称为依赖注入。 
    spring以动态灵活的方式来管理对象 ， 注入的两种方式，设置注入和构造注入。 
    设置注入的优点：直观，自然 
    构造注入的优点：可以在构造器中决定依赖关系的顺序。
    
    什么是AOP？ 
    面向切面编程（AOP）完善spring的依赖注入（DI），面向切面编程在spring中主要表现为两个方面 
    1.面向切面编程提供声明式事务管理 
    2.spring支持用户自定义的切面 
    
    面向切面编程（aop）是对面向对象编程（oop）的补充， 
    面向对象编程将程序分解成各个层次的对象，面向切面编程将程序运行过程分解成各个切面。 
    AOP从程序运行角度考虑程序的结构，提取业务处理过程的切面，oop是静态的抽象，aop是动态的抽象， 
    是对应用执行过程中的步骤进行抽象，，从而获得步骤之间的逻辑划分。 
    
    aop框架具有的两个特征： 
    1.各个步骤之间的良好隔离性 
    2.源代码无关性 
     
    Spring的事务管理机制实现的原理，就是通过这样一个动态代理对所有需要事务管理的Bean进行加载，并根据配置在invoke方法中对当前调用的 方法名进行判定，
    并在method.invoke方法前后为其加上合适的事务管理代码，这样就实现了Spring式的事务管理。Spring中的AOP实 现更为复杂和灵活，不过基本原理是一致的。

25.AOP
   AOP（Aspect-OrientedProgramming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。
   OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合
   OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。
   而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，
   AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。
   横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。
  (1.pom中引入SpringBoot的web模块和使用AOP相关的依赖：
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
  (2.不需要任何配置，AOP的默认配置属性中，spring.aop.auto属性默认是开启的，也就是说只要引入了AOP依赖后，默认已经增加了@EnableAspectJAutoProxy
  (3.定义切面类，实现web层的日志切面要想把一个类变成切面类，需要两步，
     ① 在类上使用 @Component 注解 把切面类加入到IOC容器中
     ② 在类上使用 @Aspect 注解 使之成为切面类
  (4.在切面类中定义@Before("execution(public * com.example.aop..*.*(..))")注解的方法作为切入点的前置操作
  (5.在切面类中定义@AfterReturning("execution(public * com.example.aop..*.*(..))")注解的方法作为切入点的后置操作
  (6.后置异常通知@AfterThrowing：在方法抛出异常退出时执行的通知。
  (7.后置最终通知@After：当某连接点退出时执行的通知（不论是正常返回还是异常退出）。
  (8.环绕通知@Around：包围一个连接点的通知，如方法调用等。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为，
     它也会选择是否继续执行连接点或者直接返回它自己的返回值或抛出异常来结束执行。环绕通知最强大，也最麻烦，是一个对方法的环绕，
     具体方法会通过代理传递到切面中去，切面中可选择执行方法与否，执行几次方法等。环绕通知使用一个代理ProceedingJoinPoint类型的对象来管理目标对象，
     所以此通知的第一个参数必须是ProceedingJoinPoint类型。在通知体内调用ProceedingJoinPoint的proceed()方法会导致后台的连接点方法执行。
     proceed()方法也可能会被调用并且传入一个Object[]对象，该数组中的值将被作为方法执行时的入参。
  
26.自定义注解 (注解其实就是一种标记，可以在程序代码中的关键节点（类、方法、变量、参数、包）上打上这些标记，然后程序在编译时或运行时可以检测到这些标记从而执行一些特殊操作)
  Annotation是Java5开始引入的新特征，中文名称叫注解，一般使用场景为：自定义注解+拦截器或者AOP，使用自定义注解来自己设计框架，使得代码看起来非常优雅。
  注解是一种元数据形式。即注解是属于java的一种数据类型，和类、接口、数组、枚举类似。
  注解用来修饰，类、方法、变量、参数、包。
  注解不会对所修饰的代码产生直接的影响。
  元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解：
　　　　1.@Target,说明了Annotation所修饰的对象范围
        取值(ElementType)有：
    　　　　1.CONSTRUCTOR:用于描述构造器
    　　　　2.FIELD:用于描述域
    　　　　3.LOCAL_VARIABLE:用于描述局部变量
    　　　　4.METHOD:用于描述方法
    　　　　5.PACKAGE:用于描述包
    　　　　6.PARAMETER:用于描述参数
    　　　　7.TYPE:用于描述类、接口(包括注解类型) 或enum声明
　　　　2.@Retention,用于描述注解的生命周期（即：被描述的注解在什么范围内有效）
    　　取值（RetentionPoicy）有：
    　　　　1.SOURCE:在源文件中有效（即源文件保留）
    　　　　2.CLASS:在class文件中有效（即class保留）
    　　　　3.RUNTIME:在运行时有效（即运行时保留）
    　　3.@Documented,用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。
    　　4.@Inherited,元注解是一个标记注解，阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。
    
  使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。
  @interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。
  可以通过default来声明参数的默认值。
  定义注解格式：public @interface 注解名 {定义体}
  注解参数的可支持数据类型：
　　　　1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)
　　　　2.String类型
　　　　3.Class类型
　　　　4.enum类型
　　　　5.Annotation类型
　　　　6.以上所有类型的数组
  
27.java1.8新特性
  （1）Lambda表达式
     本质上是一段匿名内部类，也可以是一段可以传递的代码
     在Java语言中引入了一个新的语法元素和操作符。这个操作符号为"->",该操符被称为Lambda操作符 或箭头操作符。可以写出更加简洁、灵活的代码。
     作为一种更加紧凑的代码风格，使java的语言表达能力得到了提升。
  （2）强大的Stream API
     Stream是Java8中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤映射数据等操作。
     使用Stream API对集合数据进行操作，就类似于使用SQL执行的数据库查询。也可以使用Stream API来并行执行操作。
     什么是Stream？ 
       就是数据渠道，用于操作数据源（集合、数组）所产生的元素序列。“集合讲的是数据，流讲的是计算。”
     并行流和串行流？
       并行流就是把内容切割成多个数据块，并且使用多个线程分别处理每个数据块的内容。Stream api中声明可以通过parallel()与sequential()方法在并行流和串行流之间进行切换。
       jdk1.8并行流使用的是fork/join框架进行并行操作
     Fork/Join 框架：就是在必要的情况下，将一个大任务，进行拆分(fork)成若干个小任务（拆到不可再拆时），再将一个个的小任务运算的结果进行 join 汇总。
  （3）Optional类
      Optional<T>类是一个容器类，代表一个值存在或不存在，原来用null表示一个值不存在，现在Optional可以更好的表达这个概念。并且可以避免空指针异常。
  （4）新的日期API LocalDate | LocalTime | LocalDateTime
      
28.jvm 类加载、优化
   一、类加载
   当程序主动使用某个类时，如果该类还未被加载到内存中，则JVM会通过加载、连接、初始化3个步骤来对该类进行初始化。如果没有意外，JVM将会连续完成3个步骤，所以有时也把这个3个步骤统称为类加载或类初始化。
     （1）加载 
         加载指的是将类的class文件读入到内存，并为之创建一个java.lang.Class对象，也就是说，当程序中使用任何类时，系统都会为之建立一个java.lang.Class对象。
         类的加载由类加载器完成，类加载器通常由JVM提供，这些类加载器也是前面所有程序运行的基础，JVM提供的这些类加载器通常被称为系统类加载器。
         除此之外，开发者可以通过继承ClassLoader基类来创建自己的类加载器。
         通过使用不同的类加载器，可以从不同来源加载类的二进制数据，通常有如下几种来源：
           a.从本地文件系统加载class文件，这是前面绝大部分示例程序的类加载方式。
           b.从JAR包加载class文件，这种方式也是很常见的，前面介绍JDBC编程时用到的数据库驱动类就放在JAR文件中，JVM可以从JAR文件中直接加载该class文件。
           c.通过网络加载class文件。
           d.把一个Java源文件动态编译，并执行加载。
     （2）链接
         当类被加载之后，系统为之生成一个对应的Class对象，接着将会进入连接阶段，连接阶段负责把类的二进制数据合并到JRE中。类连接又可分为如下3个阶段。
           1)验证：验证阶段用于检验被加载的类是否有正确的内部结构，并和其他类协调一致。Java是相对C++语言是安全的语言，例如它有C++不具有的数组越界的检查。
             这本身就是对自身安全的一种保护。验证阶段是Java非常重要的一个阶段，它会直接的保证应用是否会被恶意入侵的一道重要的防线，越是严谨的验证机制越安全。
             验证的目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，不会危害虚拟机自身安全。其主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。
             四种验证做进一步说明：
               文件格式验证：主要验证字节流是否符合Class文件格式规范，并且能被当前的虚拟机加载处理。例如：主，次版本号是否在当前虚拟机处理的范围之内。
                         常量池中是否有不被支持的常量类型。指向常量的中的索引值是否存在不存在的常量或不符合类型的常量。
               元数据验证：对字节码描述的信息进行语义的分析，分析是否符合java的语言语法的规范。
               字节码验证：最重要的验证环节，分析数据流和控制，确定语义是合法的，符合逻辑的。主要的针对元数据验证后对方法体的验证。保证类方法在运行时不会有危害出现。
               符号引用验证：主要是针对符号引用转换为直接引用的时候，是会延伸到第三解析阶段，主要去确定访问类型等涉及到引用的情况，主要是要保证引用一定会被访问到，不会出现类等无法访问的问题。
           2)准备：类准备阶段负责为类的静态变量分配内存，并设置默认初始值。对于final static修饰的变量，直接赋值为用户的定义值，其他则为系统初始值。
           3)解析：将类的二进制数据中的符号引用替换成直接引用（如物理内存地址指针）。说明一下：符号引用：以一组符号来描述所引用的目标，符号可以是任何的字面形式的字面量，
                  只要不会出现冲突能够定位到就行。布局和内存无关。直接引用：是指向目标的指针，偏移量或者能够直接定位的句柄。该引用是和内存中的布局有关的，并且一定加载进来的。
     （3）初始化
         初始化是为类的静态变量赋予正确的初始值。准备阶段和初始化阶段看似有点矛盾，其实是不矛盾的，如果类中有语句：private static int a = 10，
         它的执行过程是这样的，首先字节码文件被加载到内存后，先进行验证这一步骤，验证通过后准备阶段，给a分配内存，因为变量a是static的，
         所以此时a等于int类型的默认初始值0，即a=0,然后到解析（后面在说），到初始化这一步骤时，才把a的真正的值10赋给a,此时a=10。
   二、类加载时机
     （1）创建类的实例，也就是new一个对象
     （2）访问某个类或接口的静态变量，或者对该静态变量赋值
     （3）调用类的静态方法
     （4）反射（Class.forName("com.lyj.load")）
     （5）初始化一个类的子类（会首先初始化子类的父类）
     （6）JVM启动时标明的启动类，即文件名和类名相同的那个类    
     除此之外，下面几种情形需要特别指出：
     对于一个final类型的静态变量，如果该变量的值在编译时就可以确定下来，那么这个变量相当于“宏变量”。
     Java编译器会在编译时直接把这个变量出现的地方替换成它的值，因此即使程序使用该静态变量，也不会导致该类的初始化。
     反之，如果final类型的静态Field的值不能在编译时确定下来，则必须等到运行时才可以确定该变量的值，如果通过该类来访问它的静态变量，则会导致该类被初始化。
  三、类加载器
     类加载器负责加载所有的类，其为所有被载入内存中的类生成一个java.lang.Class实例对象。一旦一个类被加载如JVM中，同一个类就不会被再次载入了。
     正如一个对象有一个唯一的标识一样，一个载入JVM的类也有一个唯一的标识。在Java中，一个类用其全限定类名（包括包名和类名）作为标识；但在JVM中，
     一个类用其全限定类名和其类加载器作为其唯一标识。例如，如果在pg的包中有一个名为Person的类，被类加载器ClassLoader的实例kl负责加载，
     则该Person类对应的Class对象在JVM中表示为(Person.pg.kl)。这意味着两个类加载器加载的同名类：（Person.pg.kl）和（Person.pg.kl2）是不同的、它们所加载的类也是完全不同、互不兼容的。
     JVM预定义有三种类加载器，当一个JVM启动的时候，Java开始使用如下三种类加载器：
         （1）根类加载器（bootstrap class loader）:它用来加载Java的核心类，是用原生代码来实现的，并不继承自java.lang.ClassLoader
            （负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类）。由于引导类加载器涉及到虚拟机本地实现细节，
             开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作。
         （2）扩展类加载器（extensions class loader）：它负责加载JRE的扩展目录，lib/ext或者由java.ext.dirs系统属性指定的目录中的JAR包的类。由Java语言实现，父类加载器为null。
         （3）系统类加载器（system class loader）：被称为系统（也称为应用）类加载器，它负责在JVM启动时加载来自Java命令的-classpath选项、java.class.path系统属性，
             或者CLASSPATH换将变量所指定的JAR包和类路径。程序可以通过ClassLoader的静态方法getSystemClassLoader()来获取系统类加载器。如果没有特别指定，
             则用户自定义的类加载器都以此类加载器作为父加载器。由Java语言实现，父类加载器为ExtClassLoader。
          类加载器加载Class大致要经过如下8个步骤：
          a.检测此Class是否载入过，即在缓冲区中是否有此Class，如果有直接进入第h步，否则进入第b步。
          b.如果没有父类加载器，则要么Parent是根类加载器，要么本身就是根类加载器，则跳到第d步，如果父类加载器存在，则进入第c步。
          c.请求使用父类加载器去载入目标类，如果载入成功则跳至第h步，否则接着执行第e步。
          d.请求使用根类加载器去载入目标类，如果载入成功则跳至第h步，否则跳至第g步。
          e.当前类加载器尝试寻找Class文件，如果找到则执行第f步，如果找不到则执行第g步。
          f.从文件中载入Class，成功后跳至第h步。
          g.抛出ClassNotFountException异常。
          h.返回对应的java.lang.Class对象。
  四、类加载机制
     （1）全盘负责：所谓全盘负责，就是当一个类加载器负责加载某个Class时，该Class所依赖和引用其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入。
     （2）双亲委派：所谓的双亲委派，则是先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类。
                 通俗的讲，就是某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父加载器，依次递归，如果父加载器可以完成类加载任务，就成功返回；
                 只有父加载器无法完成此加载任务时，才自己去加载。
     （3）缓存机制：缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区中搜寻该Class，只有当缓存区中不存在该Class对象时，
                 系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓冲区中。这就是为很么修改了Class后，必须重新启动JVM，程序所做的修改才会生效的原因。
     双亲委派机制工作原理：
                如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，
                依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，
                这就是双亲委派模式，即每个儿子都很懒，每次有活就丢给父亲去干，直到父亲说这件事我也干不了时，儿子自己才想办法去完成。
     双亲委派机制的优势：采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，
                当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会被随意替换，
                假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，
                发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改。
  五、为什么会出现java.lang.OutOfMemoryError：即OOM：
    官方介绍为当JVM因为没有足够的内存来为对象分配空间并且垃圾回收器也已经没有空间可回收时，就会抛出 java.lang.OutOfMemoryError ：··· （注意：这是个很严重的问题，因为这个问题已经严重到不足以被应用处理）。  
    具体原因大致为两方面：
    1、自身原因：比如虚拟机本身可使用的内存太少。
    2、外在原因：如应用使用的太多，且用完没释放，浪费了内存。此时就会造成内存泄露或者内存溢出。
    
    内存泄露：申请使用完的内存没有释放，导致虚拟机不能再次使用该内存，此时这段内存就泄露了，因为申请者不用了，而又不能被虚拟机分配给别人用。
    内存溢出：申请的内存超出了JVM能提供的内存大小，此时称之为溢出。
    
    JVM内存模型：
    按照JVM规范，JAVA虚拟机在运行时会管理以下的内存区域：
    1.程序计数器：当前线程执行的字节码的行号指示器，线程私有
    2.JAVA虚拟机栈：Java方法执行的内存模型，每个Java方法的执行对应着一个栈帧的进栈和出栈的操作。
    3.本地方法栈：类似“ JAVA虚拟机栈 ”，但是为native方法的运行提供内存环境。
    4.JAVA堆：对象内存分配的地方，内存垃圾回收的主要区域，所有线程共享。可分为新生代，老生代。
    5.方法区：用于存储已经被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。Hotspot中的“永久代”。
    6.运行时常量池：方法区的一部分，存储常量信息，如各种字面量、符号引用等。
    7.直接内存：并不是JVM运行时数据区的一部分， 可直接访问的内存， 比如NIO会用到这部分。
    按照JVM规范，除了程序计数器不会抛出OOM外，其他各个内存区域都可能会抛出OOM。
    
    最常见的OOM情况有以下三种：设计模式
    
    1.java.lang.OutOfMemoryError: Java heap space ------>java堆内存溢出，此种情况最常见，一般由于内存泄露或者堆的大小设置不当引起。
                                                对于内存泄露，需要通过内存监控软件查找程序中的泄露代码，而堆大小可以通过虚拟机参数-Xms,-Xmx等修改。
    2.java.lang.StackOverflowError ------> 不会抛OOM error，但也是比较常见的Java内存溢出。JAVA虚拟机栈溢出，一般是由于程序中存在死循环或者深度递归调用造成的，
                                         栈大小设置太小也会出现此种溢出。可以通过虚拟机参数-Xss来设置栈的大小。
    3.java.lang.OutOfMemoryError: PermGen space ------>java永久代溢出，即方法区溢出了，一般出现于大量Class或者jsp页面，或者采用cglib等反射机制的情况，
                                                因为上述情况会产生大量的Class信息存储于方法区。此种情况可以通过更改方法区的大小来解决，
                                                使用类似-XX:PermSize=64m -XX:MaxPermSize=256m的形式修改。另外，过多的常量尤其是字符串也会导致方法区溢出。
                                                
    解决方式：
    1.java.lang.OutOfMemoryError:Javaheap space
      在JVM中如果98％的时间是用于GC且可用的 Heap size 不足2％的时候将抛出此异常信息。
      Javaheap space 错误产生的常见原因可以分为以下几类：
      1、请求创建一个超大对象，通常是一个大数组。
      2、超出预期的访问量/数据量，通常是上游系统请求流量飙升，常见于各类促销/秒杀活动，可以结合业务流量指标排查是否有尖状峰值。
      3、过度使用终结器（Finalizer），该对象没有立即被 GC。
      4、内存泄漏（Memory Leak），大量对象引用没有释放，JVM 无法对其自动回收，常见于使用了 File 等资源没有回收。
      解决方案：
      针对大部分情况，通常只需要通过 -Xmx 参数调高 JVM 堆内存空间即可。如果仍然没有解决，可以参考以下情况做进一步处理：
      1、如果是超大对象，可以检查其合理性，比如是否一次性查询了数据库全部结果，而没有做结果数限制。
      2、如果是业务峰值压力，可以考虑添加机器资源，或者做限流降级。
      3、如果是内存泄漏，需要找到持有的对象，修改代码设计，比如关闭没有释放的连接。
      4、尽早释放无用对象的引用。
        大多数程序员在使用临时变量的时候，都是让引用变量在退出活动域(scope)后，自动设置为null，暗示垃圾收集器来收集该对象，
        还必须注意该引用的对象是否被监听，如果有，则要去掉监听器，然后再赋空值。

29.jpa
  JPA的全称是Java Persistence API，提供了一个规范，用于将数据通过Java对象持久化、读取和管理数据库中的关系表。
  所以JPA本质上就是一种ORM规范，它的目标是实现ORM的天下归一
  1、java数据库编程的进化史：
    1）jdbc：
    jdbc是jdk提供数据库操作最基础的api，它提供了一套操作数据库的标准规范，不同的数据库厂商通过自己的驱动jar来适配该规范。
    Class.forName("com.mysql.cj.jdbc.Driver");
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/test","root","123456");           
    // 执行查询
    Statement stmt = conn.createStatement();
    String sql = "SELECT id, name, url FROM websites";
    ResultSet rs = stmt.executeQuery(sql);
    
    2）hibernate、mybatis 等ORM框架：
    Hibernate 可以认为是JPA规范的的一种实现，使用起来比较方便，但是不够灵活；
    Mybatis是一个持久层的sql mapping框架。 mybatis的优势在于可以灵活的写SQL，自由度比较高
    
    3）spring data jpa：
    spring data jpa不是像Hibernate那样对jpa的实现，而是对其更进一步做了封装，使用起来非常简单、灵活。
    spring data jpa的目的就是不让程序员花太多时间在数据库层面的处理，所以要做的只是声明接口（类似于mybatis），
    而且spring data jpa会帮你把常用的sql都拼写好（不像mybatis那样，还需要自己写sql或者mapper）。
    基于spring data jpa编写持久层逻辑，一般分为如下几步：  
    定义实体类，关联数据库中的表。
    声明持久层（Dao层）接口，接口需要继承Repository。
    接口中声明需要的方法，spring data jpa会自动给我们生成实现代码
    Spring data jpa有以下几个常用的接口：
        Repository：仅仅是一个标识，表明任何继承它的均为仓库接口类，方便Spring自动扫描识别， 一般不在程序中直接使用。
        CrudRepository：继承Repository，实现了一组CRUD相关的方法，这个用的比较多，一般如果上层业务只需要基本的增删改查，继承这个接口就可以了。
        JpaRepository：继承PagingAndSortingRepository，实现一组JPA规范相关的方法。这个也用的比较多，它和CrudRepository区别在于支持分页和排序。

线程
redis
数据库优化
sql分页
事务
cookie和session（cookie如果被浏览器禁用了，可以加在url）

